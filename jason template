{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"thinker99": {
		"prefix": "thinker99",
		"body": [
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "#define int long long",
		  "#define pi (3.141592653589)",
		  "#define mod 1000000007",
		  "#define float double",
		  "#define ff first",
		  "#define ss second",
		  "#define mk make_pair",
		  "#define pb push_back",
		  "#define rep(i,start,end) for(int i=start;i<end;i++)",
		  "#define ld long double",
		  "#define w(x) int x; cin>>x; while(x--)",
		  "#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);",
		  "",
		  "",
		  "signed main()",
		  "{",
		  "fast",
		  "$0",
		  "return 0;",
		  "}"
		],
		"description": "thinker99"
	  },
	"Moduler Binary Exponentiation": {
		"prefix": "mbe",
		"body": [
		  "int power( int a, int b)",
		  "{",
		  "     int p = 1;",
		  "     int N = 1e9 + 7;;",
		  "     while (b > 0)",
		  "     {",
		  "          if (b & 1)",
		  "               p = (p % N * a % N) % N;",
		  "          a = (a % N * a % N) % N;",
		  "          b >>= 1;",
		  "     }",
		  "     return p;",
		  "}"
		],
		"description": "Moduler Binary Exponentiation"
	  },
	  "Segmented Sieve": {
		"prefix": "seg",
		"body": [
		  "vector<bool> segmentedSieve(long long L, long long R)",
		  "{",
		  "    long long lim = sqrt(R);",
		  "    vector<bool> mark(lim + 1, false);",
		  "    vector<long long> primes;",
		  "    for (long long i = 2; i <= lim; ++i)",
		  "    {",
		  "        if (!mark[i])",
		  "        {",
		  "            primes.push_back(i);",
		  "            for (long long j = i * i; j <= lim; j += i)",
		  "                mark[j] = true;",
		  "        }",
		  "    }",
		  "",
		  "    vector<bool> isPrime(R - L + 1, true);",
		  "    for (long long i : primes)",
		  "        for (long long j = max(i * i, (L + i - 1) / i * i); j <= R; j += i)",
		  "            isPrime[j - L] = false;",
		  "    if (L == 1)",
		  "        isPrime[0] = false;",
		  "    return isPrime;",
		  "}"
		],
		"description": "Segmented Sieve"
	  },
	  "For Loop": {
		"prefix": "loop",
		"body": [
		  "for(int i=0;i<n;i++)",
		  "{",
		  "$1",
		  "}"
		],
		"description": "For Loop"
	  },
	  "Sieve": {
		"prefix": "sieve",
		"body": [
		  "int n;",
		  "vector<bool> is_prime(n+1, true);",
		  "is_prime[0] = is_prime[1] = false;",
		  "for (int i = 2; i <= n; i++) {",
		  "    if (is_prime[i] && (long long)i * i <= n) {",
		  "        for (int j = i * i; j <= n; j += i)",
		  "            is_prime[j] = false;",
		  "    }",
		  "}"
		],
		"description": "Sieve"
	  },
	  "random number generator": {
		"prefix": "rn",
		"body": [
		  "int rn(int a, int b)",
		  "{",
		  "    return a + rand() % (b - a + 1);",
		  "}"
		],
		"description": "random number generator"
	  },
	  "Two pointers": {
		"prefix": "tw",
		"body": [
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "#define int long long",
		  "#define pi (3.141592653589)",
		  "#define mod 1000000007",
		  "#define float double",
		  "#define ff first",
		  "#define ss second",
		  "#define w(x)  \\",
		  "    int x;    \\",
		  "    cin >> x; \\",
		  "    while (x--)",
		  "#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);",
		  "",
		  "signed main()",
		  "{",
		  "    fast",
		  "    w(x)",
		  "    {",
		  "        int n, k;",
		  "        cin >> n >> k;",
		  "        int arr[n];",
		  "        map<int, int> mp;",
		  "        for (int i = 0; i < n; i++)",
		  "            cin >> arr[i];",
		  "        int cnt = 0, ans = 0;",
		  "        int tail = 0, head = -1;",
		  "        while (tail < n)",
		  "        {",
		  "            while ((head + 1 < n) && ((cnt < k) || ((cnt == k) && (mp[arr[head + 1]] > 0))))",
		  "            {",
		  "                head++;",
		  "                mp[arr[head]]++;",
		  "                if (mp[arr[head]] == 1)",
		  "                    cnt++;",
		  "            }",
		  "            ans += (head - tail + 1);",
		  "            if (tail <= head)",
		  "            {",
		  "                mp[arr[tail]]--;",
		  "                if (mp[arr[tail]] == 0)",
		  "                    cnt--;",
		  "                tail++;",
		  "            }",
		  "            else",
		  "            {",
		  "                tail++;",
		  "                head = tail - 1;",
		  "            }",
		  "        }",
		  "        cout << ans << \"\\n\";",
		  "    }",
		  "    return 0;",
		  "}"
		],
		"description": "Two pointers"
	  },
	  "Modular addition": {
		"prefix": "addmod",
		"body": [
		  "int add(int a, int b)",
		  "{",
		  "    a = a % mod;",
		  "    b = b % mod;",
		  "    int ans = a + b;",
		  "    return ((ans % mod) + mod) % mod;",
		  "}"
		],
		"description": "Modular addition"
	  },
	  "Modular multiplication": {
		"prefix": "mulmod",
		"body": [
		  "int mul(int a, int b)",
		  "{",
		  "    a = a % mod;",
		  "    b = b % mod;",
		  "    int ans = a * b;",
		  "    return ((ans % mod) + mod) % mod;",
		  "}"
		],
		"description": "Modular multiplication"
	  },
	  "Inverse calculator": {
		"prefix": "inv",
		"body": [
		  "inv[1] = 1; for (int i = 2; i < 300000; i++) inv[i] = 1LL * inv[mod % i] * (mod - mod / i) % mod;",
		  "factinv[0] = 1; for (int i = 1; i < 300000; i++) factinv[i] = 1LL * factinv[i - 1] * inv[i] % mod;"
		],
		"description": "Inverse calculator"
	  },
	  "Factorial": {
		"prefix": "fact",
		"body": [
		  "#include <iostream>",
		  "using namespace std;",
		  "#define mod 1000000007",
		  "long long H, W, A, B, K, ret, res, fact[300000], inv[300000], factinv[300000];",
		  "long long ncr(int n, int r) { return (n - r >= 0 && r >= 0) ? 1LL * fact[n] * factinv[r] % mod * factinv[n - r] % mod : 0; }",
		  "int main()",
		  "{",
		  "    fact[0] = 1;",
		  "    for (int i = 1; i < 300000; i++)",
		  "        fact[i] = 1LL * fact[i - 1] * i % mod;",
		  "    inv[1] = 1;",
		  "    for (int i = 2; i < 300000; i++)",
		  "        inv[i] = 1LL * inv[mod % i] * (mod - mod / i) % mod;",
		  "    factinv[0] = 1;",
		  "    for (int i = 1; i < 300000; i++)",
		  "        factinv[i] = 1LL * factinv[i - 1] * inv[i] % mod;",
		  "    cin >> H >> W >> A >> B;",
		  "    long long sum = 0;",
		  "    for (int i = 0; i < H - A; i++)",
		  "    {",
		  "        sum += ncr(B + i - 1, B - 1) * ncr((W - B - 1) + (H - i - 1), W - B - 1);",
		  "        sum %= mod;",
		  "    }",
		  "    cout << sum << endl;",
		  "    return 0;",
		  "}"
		],
		"description": "Factorial"
	  },
	  "Fast factorization": {
		"prefix": "fast",
		"body": [
		  "int prime[10000001];",
		  "void sieve() {",
		  "    for(int i = 1; i < 10000001; ++i) {",
		  "        prime[i] = i;",
		  "    }",
		  "    for(int i = 2; i < 10000001; ++i) {",
		  "        if(prime[i] == i) {",
		  "            for(int j = i; j < 10000001; j += i) {",
		  "                prime[j] = i;",
		  "            }",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "Fast factorization"
	  },
	  "DFS": {
		"prefix": "dfs",
		"body": [
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "",
		  "int n, m;",
		  "",
		  "vector<vector<int>> g;",
		  "",
		  "vector<int> vis;",
		  "",
		  "int nodeVisited = 0;",
		  "",
		  "",
		  "",
		  "void dfs(int node)",
		  "{",
		  "    vis[node] = 1;",
		  "    nodeVisited++;",
		  "    for (auto v : g[node])",
		  "    {",
		  "        if (!vis[node])",
		  "        {",
		  "            dfs(v);",
		  "        }",
		  "    }",
		  "}",
		  "",
		  "void solve()",
		  "{",
		  "    // N,M <= 10^5",
		  "    cin >> n >> m;",
		  "    g.clear(); // for testcase",
		  "    g.resize(n + 1);",
		  "",
		  "    vis.assign(n + 1, 0);",
		  "    for (int i = 0; i < m; i++)",
		  "    {",
		  "        int a, b;",
		  "        cin >> a >> b;",
		  "        g[a].push_back(b);",
		  "        g[b].push_back(a);",
		  "    }",
		  "",
		  "    vector<long long> compsz;",
		  "",
		  "    for (int node = 1; node <= n; node++)",
		  "    {",
		  "        if (!vis[node])",
		  "        {",
		  "            nodeVisited = 0;",
		  "            dfs(node);",
		  "            compsz.push_back(nodeVisited);",
		  "        }",
		  "    }",
		  "",
		  "    long long ans = 0, preSum = 0;",
		  "    for (auto v : compsz)",
		  "    {",
		  "        ans += preSum * v;",
		  "        preSum += v;",
		  "    }",
		  "    cout << ans << endl;",
		  "}"
		],
		"description": "DFS"
	  },
	  "String Hashing": {
		"prefix": "qckhash",
		"body": [
		  "int quickhash(string s, int p, int m)",
		  "{",
		  "    int ans = (s[0] - 'a' + 1);",
		  "    for (int i = 1; i < s.size(); i++)",
		  "    {",
		  "        ans = (ans * p + (s[i] - 'a' + 1)) % m;",
		  "    }",
		  "    return ans;",
		  "}"
		],
		"description": "String Hashing"
	  },
	  "KMP": {
		"prefix": "kmp",
		"body": [
		  "int kmp[1000100];",
		  "",
		  "int func(string p)",
		  "{",
		  "    int m = p.size();",
		  "    int i = 0, j = -1;",
		  "    kmp[0] = -1;",
		  "    while (i < m)",
		  "    {",
		  "        while (j != -1 && (p[i] != p[j]))",
		  "            j = kmp[j];",
		  "        j++;",
		  "        i++;",
		  "        kmp[i] = j;",
		  "    }",
		  "}"
		],
		"description": "KMP"
	  },
	  "BFS": {
		"prefix": "bfs",
		"body": [
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "#define int long long",
		  "#define pi (3.141592653589)",
		  "#define mod 1000000007",
		  "#define float double",
		  "#define ff first",
		  "#define ss second",
		  "#define w(x)  \\",
		  "    int x;    \\",
		  "    cin >> x; \\",
		  "    while (x--)",
		  "#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);",
		  "using ii = pair<int, int>;",
		  "int h, w;",
		  "char arr[25][25];",
		  "int dx[] = {1, 0, -1, 0};",
		  "int dy[] = {0, 1, 0, -1};",
		  "bool inside(int x, int y)",
		  "{",
		  "    if (x < 0 || x >= h || y < 0 || y >= w || arr[x][y] == '#')",
		  "        return 0;",
		  "    else",
		  "        return 1;",
		  "}",
		  "",
		  "int dist[25][25];",
		  "int bfs(ii st)",
		  "{",
		  "    for (int i = 0; i < h; i++)",
		  "    {",
		  "        for (int j = 0; j < w; j++)",
		  "        {",
		  "            dist[i][j] = 1e9;",
		  "        }",
		  "    }",
		  "    dist[st.ff][st.ss] = 0;",
		  "    queue<ii> q;",
		  "    q.push(st);",
		  "    int ans = -1;",
		  "    while (!q.empty())",
		  "    {",
		  "        ii cur = q.front();",
		  "        q.pop();",
		  "        int curd = dist[cur.ff][cur.ss];",
		  "        for (int i = 0; i < 4; i++)",
		  "        {",
		  "            if (!(inside(cur.ff + dx[i], cur.ss + dy[i])))",
		  "                continue;",
		  "            ii neigh = {cur.ff + dx[i], cur.ss + dy[i]};",
		  "            if (dist[neigh.ff][neigh.ss] > curd + 1)",
		  "            {",
		  "                dist[neigh.ff][neigh.ss] = curd + 1;",
		  "                q.push(neigh);",
		  "                ans = max(ans, curd + 1);",
		  "            }",
		  "        }",
		  "    }",
		  "    return ans;",
		  "}",
		  "signed main()",
		  "{",
		  "    fast",
		  "            cin >>",
		  "        h >> w;",
		  "    for (int i = 0; i < h; i++)",
		  "    {",
		  "        for (int j = 0; j < w; j++)",
		  "        {",
		  "            cin >> arr[i][j];",
		  "        }",
		  "    }",
		  "    int final = -1;",
		  "    for (int i = 0; i < h; i++)",
		  "    {",
		  "        for (int j = 0; j < w; j++)",
		  "        {",
		  "            if(arr[i][j]=='.')",
		  "            final = max(final, bfs(make_pair(i, j)));",
		  "        }",
		  "    }",
		  "    cout << final << \"\\n\";",
		  "    return 0;",
		  "}"
		],
		"description": "BFS"
	  },
	  "Dijkstra": {
		"prefix": "dijk",
		"body": [
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "#define int long long",
		  "#define pi (3.141592653589)",
		  "#define mod 1000000007",
		  "#define float double",
		  "#define ff first",
		  "#define ss second",
		  "#define w(x)  \\",
		  "    int x;    \\",
		  "    cin >> x; \\",
		  "    while (x--)",
		  "#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);",
		  "#define INF 1000000007",
		  "",
		  "typedef pair<int, int> iPair;",
		  "map<iPair, int> mp;",
		  "vector<vector<iPair>> adj;",
		  "",
		  "void shortestPath(int V, int src, int target)",
		  "{",
		  "    priority_queue<iPair, vector<iPair>, greater<iPair>> pq;",
		  "    vector<int> dist(V, INF);",
		  "    vector<bool> visited(V, false);",
		  "    vector<int> prev(V, -1);",
		  "    pq.push(make_pair(0, src));",
		  "    dist[src] = 0;",
		  "    while (!pq.empty() && !visited[target])",
		  "    {",
		  "        int u = pq.top().second;",
		  "        pq.pop();",
		  "        if (visited[u])",
		  "        {",
		  "            continue;",
		  "        }",
		  "        visited[u] = true;",
		  "        for (auto x : adj[u])",
		  "        {",
		  "            int v = x.first;",
		  "            int weight = x.second;",
		  "",
		  "            if (dist[v] > dist[u] + weight)",
		  "            {",
		  "                dist[v] = dist[u] + weight;",
		  "                pq.push(make_pair(dist[v], v));",
		  "                prev[v] = u;",
		  "            }",
		  "        }",
		  "    }",
		  "    if (dist[target] != INF)",
		  "    {",
		  "        vector<int> res;",
		  "        res.push_back(target);",
		  "        int temp = target;",
		  "        while (temp != src)",
		  "        {",
		  "            temp = prev[temp];",
		  "            res.push_back(temp);",
		  "        }",
		  "        reverse(res.begin(), res.end());",
		  "",
		  "        for (int i = 1; i < res.size(); i++)",
		  "        {",
		  "            mp[make_pair(res[i], res[i - 1])]++;",
		  "            mp[make_pair(res[i - 1], res[i])]++;",
		  "        }",
		  "    }",
		  "}",
		  "",
		  "signed main()",
		  "{",
		  "    fast int n, m;",
		  "    cin >> n >> m;",
		  "    const int V = n + 1;",
		  "    adj.resize(V);",
		  "    vector<iPair> allp;",
		  "    int a, b, c;",
		  "    for (int i = 0; i < m; i++)",
		  "    {",
		  "        cin >> a >> b >> c;",
		  "        allp.push_back(make_pair(a, b));",
		  "        allp.push_back(make_pair(b, a));",
		  "        adj[a].push_back(make_pair(b, c));",
		  "        adj[b].push_back(make_pair(a, c));",
		  "    }",
		  "",
		  "    for (int i = 1; i <= n; i++)",
		  "    {",
		  "        for (int j = 1; j <= n; j++)",
		  "        {",
		  "            if (i != j)",
		  "                shortestPath(V, i, j);",
		  "        }",
		  "    }",
		  "    int cnt = 0;",
		  "    for (int i = 0; i < allp.size(); i++)",
		  "    {",
		  "        if (mp[make_pair(allp[i].ff, allp[i].ss)] < 1)",
		  "        {",
		  "            cnt++;",
		  "            // cout<<allp[i].ff<<\" \"<<allp[i].ss<<\"\\n\";",
		  "        }",
		  "    }",
		  "    cout << cnt / 2 << \"\\n\";",
		  "    return 0;",
		  "}"
		],
		"description": "Dijkstra"
	  }
}
